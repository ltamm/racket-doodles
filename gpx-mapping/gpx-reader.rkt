#lang racket

; Simple, naive GPX reader
; Ignores all tracks/segments, just iterates through tags and extracts trackpoint coordinates
; Created this reader because I wanted to experiment with the map-widget library: https://alex-hhh.github.io/2018/06/racket-map-widget.html
; The gpx reader used in the example only extracted the first segment and I wanted to plot 
;    all my trackpoints (regardless of segmentation)
; The GPX file generated by my Garmin InReach device had all the separate tracks recorded in a single GPX file 

(require xml rackunit)

(provide read-gpx-trackpoints)

; xml file -> list of trackpoints (represented as vector pairs)
(define (read-gpx-trackpoints in)
  (let ([e (document-element (read-xml in))])
    (extract-tracks (list e) empty)))

; list of elements -> list of trackpoints (represented as vector pairs)
; basically a DFS
(define (extract-tracks elements trkpts)
  (if (empty? elements)
      trkpts
      (let ([e (first elements)])
        (if (element? (first elements))
            (let* ([name (element-name e)]
                   [content (element-content e)]
                   [next (append content (rest elements))])
              (if (equal? name 'trkpt)
                  (extract-tracks next (cons
                                        (extract-latlong e)
                                        trkpts))
                  (extract-tracks next trkpts)))
            (extract-tracks (rest elements) trkpts)))))

(define (extract-latlong trkpt)
  (let ([attributes (element-attributes trkpt)])
    (vector
     (string->number (attribute-value (findf (lambda (a) (equal? (attribute-name a) 'lat)) attributes)))
     (string->number (attribute-value (findf (lambda (a) (equal? (attribute-name a) 'lon)) attributes))))))

; some rudimentary testing
(define minimal-test-string "<?xml version=\"1.0\"?><gpx></gpx>")
(define empty-trk "<?xml version=\"1.0\"?><gpx><trk /></gpx>")
(define empty-trkseg "<?xml version=\"1.0\"?><gpx><trk><trkseg></trkseg></trk></gpx>")
(define contains-trkpt "<?xml version=\"1.0\"?><gpx><trk><trkseg><trkpt lat=\"45.44706\" lon=\"-73.302348\"></trkpt></trkseg></trk></gpx>")

(define gpx1 (read-gpx-trackpoints (open-input-string minimal-test-string)))
(check-true (list? gpx1))
(check-true (empty? gpx1))
(define gpx2 (read-gpx-trackpoints (open-input-string empty-trk)))
(check-true (empty? gpx2))
(define gpx3 (read-gpx-trackpoints (open-input-string empty-trkseg)))
(check-true (empty? gpx3))
(define gpx4 (read-gpx-trackpoints (open-input-string contains-trkpt)))
(check-true (eq? 1 (length gpx4)))
